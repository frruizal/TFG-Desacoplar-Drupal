<?php

/**
 * @file
 * Contains tfg.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
/**
 * Implements hook_help().
 */
function tfg_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the tfg module.
    case 'help.page.tfg':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Compile Gatsby on hook save') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function tfg_theme() {
  return [
    'tfg' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_node_postupdate().
 *//*
function tfg_node_postupdate($node) {

  $handle = curl_init();

  $url = "172.22.0.4:3000/compilar";

  curl_setopt($handle, CURLOPT_PORT, 3000);
  // Set the url

  curl_setopt($handle, CURLOPT_URL, $url);

  // Set the result output to be a string.
  curl_setopt($handle, CURLOPT_RETURNTRANSFER, TRUE);

  //url_setopt ($handle, CURLOPT_PORT , 3000);
  $output = curl_exec($handle);

  curl_close($handle);

  echo $output;
  drupal_set_message($output);

}*/
/**
 * Implements hook_entity_view().
 */
/*function tfg_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
 $nid=2;
  $nodo= node_load($nid);
  dsm($nodo);

  $types = NodeType::loadMultiple();
  $nodes = Node::loadMultiple();
  $alias_manager = \Drupal::service('path.alias_manager');
  foreach ($types as $key => $type) {
    $list[$key] = $type->get('name');
    dsm( "---------------------------");
    dsm( $list[$key]);
    dsm( "---------------------------");
  }
  foreach($nodes as $key2 => $node) {
    //Se obtiene el nid del nodo
    $nid = $node->id();
    //Se obtiene el alias del nodo a traves de la ruta con el Alias Manager
    $node_alias = $alias_manager->getAliasByPath('/node/' . $nid);

    $node_print[$nid]['path_alias'] = $node_alias;
    $node_print[$nid]['title'] = $node->getTitle();
    $body = $node->get('body')-> getValue();
    dsm($node_alias);
    dsm($node->getTitle());
    dsm($body[0]['value']);
    //dsm($node->get('usuario')->getValue()[0][field_fecha]);

  }
}*/

/**
 * Gets called after a node has been deleted from database.
 *
 * @param $node
 *   A node object
 *
 * @see hook_node_postsave()
 * @see hook_node_postinsert()
 * @see hook_node_postupdate()
 * @see hook_node_postdelete()
 *//*
function hook_post_action_example_node_postdelete($node) {
  watchdog('hook_post_action_test', "The deleted node {$node->type} id is {$node->nid} from " . __FUNCTION__);
}
*/
function tfg_entity_postdelete(EntityInterface $entity) {
  $id = $entity->id();
  $entity_type = $entity->getEntityTypeId();

  \Drupal::logger('hook_post_action_postdelete')
    ->info("The deleted entity {$entity_type} id is {$id} from " . __FUNCTION__);
  dsm('borrada');
}

